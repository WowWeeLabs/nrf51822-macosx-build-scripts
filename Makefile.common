DEVICE := NRF51
DEVICESERIES := nrf51

SDK_INCLUDE_PATH = $(SDK_PATH)/Include
SDK_SOURCE_PATH = $(SDK_PATH)/Source
# TEMPLATE_PATH += $(SDK_SOURCE_PATH)/templates/gcc
OUTPUT_BINARY_DIRECTORY := build


ifeq ($(LINKER_SCRIPT),)
	ifeq ($(USE_SOFTDEVICE), S110-v6)
		LINKER_SCRIPT = gcc_$(DEVICESERIES)_s110-v6_$(DEVICE_VARIANT).ld
		OUTPUT_FILENAME := $(OUTPUT_FILENAME)_s110-v6_$(DEVICE_VARIANT)
		STARTADDRESS = 0x14000
	else
		ifeq ($(USE_SOFTDEVICE), S110)
			LINKER_SCRIPT = gcc_$(DEVICESERIES)_s110_$(DEVICE_VARIANT).ld
			OUTPUT_FILENAME := $(OUTPUT_FILENAME)_s110_$(DEVICE_VARIANT)
			STARTADDRESS = 0x16000
		else
			ifeq ($(USE_SOFTDEVICE), S120)
				LINKER_SCRIPT = gcc_$(DEVICESERIES)_s120_$(DEVICE_VARIANT).ld
				OUTPUT_FILENAME := $(OUTPUT_FILENAME)_s120_$(DEVICE_VARIANT)
	 			STARTADDRESS = 0x18000
			else
				LINKER_SCRIPT = gcc_$(DEVICESERIES)_blank_$(DEVICE_VARIANT).ld
				OUTPUT_FILENAME := $(OUTPUT_FILENAME)_$(DEVICE_VARIANT)
				STARTADDRESS = 0x0
			endif
		endif
	endif
else
# Use externally defined settings
endif

CPU := cortex-m0

CC			:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-gcc"
AS			:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-as"
AR			:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-ar" -r
LD			:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-ld"
NM			:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-nm"
OBJDUMP			:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-objdump"
OBJCOPY			:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-objcopy"
GDB			:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-gdb"
SIZE			:= "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-size"

MK				:= mkdir
RM 				:= rm -rf

OBJECT_DIRECTORY := build
LISTING_DIRECTORY := build

C_SOURCE_FILES += system_$(DEVICESERIES).c
ASSEMBLER_SOURCE_FILES += gcc_startup_$(DEVICESERIES).s

# Linker flags
#LDFLAGS += -L"$(GNU_INSTALL_ROOT)/arm-none-eabi/lib/armv6-m"
#LDFLAGS += -L"$(GNU_INSTALL_ROOT)/lib/gcc/arm-none-eabi/$(GNU_VERSION)/armv6-m"
LDFLAGS += -Xlinker -Map=$(LISTING_DIRECTORY)/$(OUTPUT_FILENAME).map
LDFLAGS += -mcpu=$(CPU) -mthumb -mabi=aapcs -L $(TEMPLATE_PATH) -T$(LINKER_SCRIPT)

# Compiler flags
CFLAGS += -mcpu=$(CPU) -mthumb -mabi=aapcs -D$(DEVICE) -D$(BOARD) -D$(TARGET_CHIP) --std=gnu99
CFLAGS += -Wall -Werror
CFLAGS += -mfloat-abi=soft

# Assembler flags
ASMFLAGS += -x assembler-with-cpp

INCLUDEPATHS += -I./src
INCLUDEPATHS += -I"$(SDK_PATH)/Include"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/gcc"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/console"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/nrf_assert"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/sdk"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/bootloader_dfu"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/bootloader_dfu/hci_transport"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/bootloader_dfu/ble_transport"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/app_common"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/sd_common"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/ble"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/ble/ble_services"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/ble/device_manager"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/ble/device_manager/experimental"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/ext_sensors"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/application"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/application/codecs"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/application/codecs/common"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/application/codecs/s110"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/application/codecs/s110/serializers"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/application/transport"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/common"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/common/struct_ser"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/common/struct_ser/s110"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/common/transport"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/connectivity"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/connectivity/codecs"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/connectivity/codecs/common"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/connectivity/codecs/s110"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/connectivity/codecs/s110/middleware"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/connectivity/codecs/s110/serializers"
INCLUDEPATHS += -I"$(SDK_PATH)/Include/serialization/connectivity/transport"



ifeq ($(USE_SOFTDEVICE), S110-v6)
	INCLUDEPATHS += -I"$(SDK_PATH)/Include/s110"
else
	ifeq ($(USE_SOFTDEVICE), S110)
		INCLUDEPATHS += -I"$(SDK_PATH)/Include/s110"
	else
		ifeq ($(USE_SOFTDEVICE), S120)
			INCLUDEPATHS += -I"$(SDK_PATH)/Include/s120"
		else
			INCLUDEPATHS += -I"$(SDK_PATH)/Include/sdk_soc"
		endif
	endif
endif

# Sorting removes duplicates
BUILD_DIRECTORIES := $(sort $(OBJECT_DIRECTORY) $(OUTPUT_BINARY_DIRECTORY) $(LISTING_DIRECTORY) )

####################################################################
# Rules                                                            #
####################################################################

C_SOURCE_FILENAMES = $(notdir $(C_SOURCE_FILES) )
ASSEMBLER_SOURCE_FILENAMES = $(notdir $(ASSEMBLER_SOURCE_FILES) )

# Make a list of source paths
C_SOURCE_PATHS += $(SDK_SOURCE_PATH) $(TEMPLATE_PATH) $(wildcard $(SDK_SOURCE_PATH)/*/)  $(wildcard $(SDK_SOURCE_PATH)/ext_sensors/*/) $(wildcard $(SDK_SOURCE_PATH)/ble/*/) $(BUILD_SCRIPTS_PATH) src
ASSEMBLER_SOURCE_PATHS = $(SDK_SOURCE_PATH) $(TEMPLATE_PATH) $(wildcard $(SDK_SOURCE_PATH)/*/) $(BUILD_SCRIPTS_PATH)

C_OBJECTS = $(addprefix $(OBJECT_DIRECTORY)/, $(C_SOURCE_FILENAMES:.c=.o) )
ASSEMBLER_OBJECTS = $(addprefix $(OBJECT_DIRECTORY)/, $(ASSEMBLER_SOURCE_FILENAMES:.s=.o) )

# Set source lookup paths
vpath %.c $(C_SOURCE_PATHS)
vpath %.s $(ASSEMBLER_SOURCE_PATHS)

## Default build target
.PHONY: all
all: debug

# Include automatically previously generated dependencies
-include $(C_OBJECTS:.o=.d)

### Targets
# debug:    OUTPUT_FILENAME:=$(OUTPUT_FILENAME)-debug
debug:    CFLAGS += -DDEBUG -gdwarf-2 -g3 -O0
debug:    ASMFLAGS += -DDEBUG -gdwarf-2 -g3 -O0
debug:    $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).bin $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).hex

.PHONY: release
# release:  OUTPUT_FILENAME:=$(OUTPUT_FILENAME)-release
release:  CFLAGS += -DNDEBUG -O3
release:  ASMFLAGS += -DNDEBUG -O3
release:  $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).bin $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).hex

echostuff:
	@echo C_OBJECTS: [$(C_OBJECTS)]
	@echo C_SOURCE_FILES: [$(C_SOURCE_FILES)]
	@echo C_SOURCE_PATHS: [$(C_SOURCE_PATHS)]

## Create build directories
$(BUILD_DIRECTORIES):
	$(MK) $@

## Create objects from C source files
$(OBJECT_DIRECTORY)/%.o: %.c
# Do the actual compilation
	@echo Build dependency for $<
	$(CC) $(CFLAGS) $(INCLUDEPATHS) -M $< -MF $(@:.o=.d) -MT $@
	@echo Build $<
	$(CC) $(CFLAGS) $(INCLUDEPATHS) -g -c -o $@ $<

## Assemble .s files
$(OBJECT_DIRECTORY)/%.o: %.s
	$(CC) $(ASMFLAGS) $(INCLUDEPATHS) -c -o $@ $<

## Link C and assembler objects to an .out file
$(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out: $(BUILD_DIRECTORIES) $(C_OBJECTS) $(ASSEMBLER_OBJECTS) $(LIBRARIES)
	$(CC) $(LDFLAGS) $(C_OBJECTS) $(ASSEMBLER_OBJECTS) $(LIBRARIES) -o $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out
	$(SIZE) $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out

## Create binary .bin file from the .out file
$(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).bin: $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out
	$(OBJCOPY) -O binary $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).bin

## Create binary .hex file from the .out file
$(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).hex: $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out
	$(OBJCOPY) -O ihex $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).out $(OUTPUT_BINARY_DIRECTORY)/$(OUTPUT_FILENAME).hex

clean:
	$(RM) $(OUTPUT_BINARY_DIRECTORY)

# Create binary file from the softdevice 7 hex file
$(OUTPUT_BINARY_DIRECTORY)/softdevice.bin: $(BUILD_DIRECTORIES)
		$(OBJCOPY) -I ihex -O binary $(SOFTDEVICE_HEX_PATH) $(OUTPUT_BINARY_DIRECTORY)/softdevice.bin

# Create IUCR binary file from the softdevice 6 UICR hex file
$(OUTPUT_BINARY_DIRECTORY)/softdevice_uicr.bin: $(SOFTDEVICE_HEX_PATH)  $(BUILD_DIRECTORIES)
	$(OBJCOPY) -Iihex -Obinary --only-section .sec3 $< $@

# Create binary file from the softdevice 6 hex file
$(OUTPUT_BINARY_DIRECTORY)/softdevice_main.bin: $(SOFTDEVICE_HEX_PATH)  $(BUILD_DIRECTORIES)
	$(OBJCOPY) -Iihex -Obinary --remove-section .sec3 $< $@

ifeq ($(FLASHER), OpenOCD)
    include $(BUILD_SCRIPTS_PATH)/Makefile.OpenOCD
else
    include $(BUILD_SCRIPTS_PATH)/Makefile.JLink
endif
